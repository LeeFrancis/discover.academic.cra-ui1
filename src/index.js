/* eslint-disable react/jsx-filename-extension, import/no-dynamic-require, global-require */
import React from "react";
import { Provider } from "react-redux";
import ReactDOM from "react-dom";
import createHistory from "history/createBrowserHistory";
import { ConnectedRouter } from "react-router-redux";
import { addLocaleData, IntlProvider } from "react-intl";
import Cookie from "js-cookie";
import App from "./components/App";
import configureStore from "./utils/configureStore";
import allLangs from "./lang/assets/lang-dict";

const getLangAsset = async langFunc => {
  const asset = await langFunc();
  return asset;
};

function render(locale, messages) {
  // Uncomment this when you are done developing your app..
  // import registerServiceWorker from './registerServiceWorker';

  // Get initial state from server-side rendering
  // eslint-disable-next-line no-underscore-dangle, no-undef
  const initialState = window.__INITIAL_STATE__;
  const history = createHistory();
  const store = configureStore(history, initialState);

  ReactDOM.render(
    <Provider store={store}>
      <IntlProvider locale={locale} messages={messages}>
        <ConnectedRouter history={history}>
          <App />
        </ConnectedRouter>
      </IntlProvider>
    </Provider>,
    // eslint-disable-next-line no-undef
    document.getElementById("root")
  );
  // Uncomment this when you are done developing your app..
  // registerServiceWorker();
}

let locale = Cookie.get("locale") || "en";
try {
  const localeData = require(`react-intl/locale-data/${locale}`);
  addLocaleData(localeData);
  // Fallback to en if an error -> asset not there
  getLangAsset(allLangs[locale] || allLangs.en).then(messages => {
    render(locale, messages);
  });
} catch (e) {
  locale = "en";
  // Fall back to english file that isnt auto generated by yarn intl..
  const messages = require("./lang/en.json");
  addLocaleData(require("react-intl/locale-data/en"));
  render(locale, messages);
}
